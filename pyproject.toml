[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]


[project]
name = "cellij"
description = "Modular Multi-Omics Factor Model Framework"
authors = [
    {name = "Arber Qoku", email = "arber.qoku@dkfz-heidelberg.de"},
    {name = "Martin Rohbeck", email = "martinklaus.rohbeck@gmail.com"},
    {name = "Tim Treis", email = "tim.treis@helmholtz-munich.de"},
]
maintainers = [
    {name = "Tim Treis", email = "tim.treis@helmholtz-munich.de"},
]
urls.Documentation = "https://github.com/bioFAM/cellij"
urls.Source = "https://github.com/bioFAM/cellij.git"
urls.Home-page = "https://github.com/bioFAM/cellij.git"
version = "0.0.1.dev1"
requires-python = ">=3.9"
license = {file = "LICENSE"}
readme = "README.md"
dependencies = [
  "anndata",
  "coverage",
  "python-graphviz",
  "pyro-ppl",
  "python>=3.9",
  "pytorch",
  "numpy",
  "muon",
]

[project.optional-dependencies]
dev = [
    "bump2version",
]
docs = [
    "sphinx>=4.5",
    "sphinx-book-theme>=1.0.0",
    "sphinx_rtd_theme",
    "myst-nb",
    "sphinxcontrib-bibtex>=1.0.0",
    "sphinx-autodoc-typehints",
    "sphinx-design",
    # For notebooks
    "ipython>=8.6.0",
    "sphinx-copybutton",
]
test = [
    "pytest",
    "pytest-cov", 
]
torch = [
    "torch"
]
extra  = [
]

[tool.coverage.run]
source = ["cellij"]
omit = [
    "**/test_*.py",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
xfail_strict = true
addopts = [
#    "-Werror",  # if 3rd party libs raise DeprecationWarnings, just use filterwarnings below
    "--import-mode=importlib",  # allow using test files with same name
    "-s"  # print output from tests
]
# info on how to use this https://stackoverflow.com/questions/57925071/how-do-i-avoid-getting-deprecationwarning-from-inside-dependencies-with-pytest
filterwarnings = [
    #     "ignore:.*U.*mode is deprecated:DeprecationWarning",
]

[tool.black]
line-length = 120
target-version = ['py39']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.jupytext]
formats = "ipynb,md"

[tool.hatch.metadata]
allow-direct-references = true

[tool.ruff]
exclude = [
    ".git",
    ".tox",
    "__pycache__",
    "build",
    "docs/_build",
    "dist",
    "setup.py",
]
ignore = [
    # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
    "E731",
    # allow I, O, l as variable names -> I is the identity matrix, i, j, k, l is reasonable indexing notation
    "E741",
    # Missing docstring in public package
    "D104",
    # Missing docstring in public module
    "D100",
    # Missing docstring in __init__
    "D107",
    # Missing docstring in magic method
    "D105",
    # Do not perform function calls in argument defaults.
    "B008",
    # Missing docstring in magic method
    "D105",
]
line-length = 120
select = [
    "D", # flake8-docstrings
    "I", # isort
    "E", # pycodestyle
    "F", # pyflakes
    "W", # pycodestyle
    "Q", # flake8-quotes
    "SIM", # flake8-simplify
    "TID",  # flake-8-tidy-imports
    "NPY",  # NumPy-specific rules
    "PT",  # flake8-pytest-style
    "B", # flake8-bugbear
    "UP", # pyupgrade
    "C4", # flake8-comprehensions
    "BLE", # flake8-blind-except
    "T20",  # flake8-print
    "RET", # flake8-raise
    "PGH", # pygrep-hooks
]
unfixable = ["B", "UP", "C4", "BLE", "T20", "RET"]
target-version = "py39"
[tool.ruff.per-file-ignores]
    "tests/*" = ["D", "PT", "B024"]
    "*/__init__.py" = ["F401", "D104", "D107", "E402"]
    "docs/*" = ["D","B","E","A"]
    # "src/spatialdata/transformations/transformations.py" = ["D101","D102", "D106", "B024", "T201", "RET504"]
[tool.ruff.pydocstyle]
convention = "numpy"
[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true